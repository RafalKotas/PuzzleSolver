package com.puzzlesolverappbackend.puzzleAppFileManager.constants;

import java.util.List;

public enum NonogramSolveAction {
    CORRECT_ROW_SEQUENCES_RANGES,
    CORRECT_ROW_SEQUENCES_RANGES_WHEN_MET_COLOURED_FIELDS,
    CORRECT_ROW_SEQUENCES_RANGES_IF_X_ON_WAY,
    COLOUR_OVERLAPPING_FIELDS_IN_ROW,
    EXTEND_COLOURED_FIELDS_NEAR_X_IN_ROW,
    PLACE_XS_ROW_AT_UNREACHABLE_FIELDS,
    PLACE_XS_ROW_AROUND_LONGEST_SEQUENCES,
    PLACE_XS_ROW_AT_TOO_SHORT_EMPTY_SEQUENCES,
    PLACE_XS_ROW_IF_O_WILL_CREATE_TOO_LONG_COLOURED_SEQUENCE,
    MARK_AVAILABLE_FIELDS_IN_ROW,

    CORRECT_COLUMN_SEQUENCES_RANGES,
    CORRECT_COLUMN_SEQUENCES_RANGES_WHEN_MET_COLOURED_FIELDS,
    CORRECT_COLUMN_SEQUENCES_RANGES_IF_X_ON_WAY,
    COLOUR_OVERLAPPING_FIELDS_IN_COLUMN,
    EXTEND_COLOURED_FIELDS_NEAR_X_IN_COLUMN,
    PLACE_XS_COLUMN_AT_UNREACHABLE_FIELDS,
    PLACE_XS_COLUMN_AROUND_LONGEST_SEQUENCES,
    PLACE_XS_COLUMN_AT_TOO_SHORT_EMPTY_SEQUENCES,
    PLACE_XS_COLUMN_IF_O_WILL_CREATE_TOO_LONG_COLOURED_SEQUENCE,
    MARK_AVAILABLE_FIELDS_IN_COLUMN,
    CORRECT_ROWS_SEQUENCES_RANGES_WHEN_MARKING_FIELDS,
    CORRECT_COLUMNS_SEQUENCES_RANGES_WHEN_MARKING_FIELDS;

    public static List<NonogramSolveAction> getRowSolveActions() {
        return List.of(CORRECT_ROW_SEQUENCES_RANGES, CORRECT_ROW_SEQUENCES_RANGES_WHEN_MET_COLOURED_FIELDS, CORRECT_ROW_SEQUENCES_RANGES_IF_X_ON_WAY,
                COLOUR_OVERLAPPING_FIELDS_IN_ROW, EXTEND_COLOURED_FIELDS_NEAR_X_IN_ROW,
                PLACE_XS_ROW_AT_UNREACHABLE_FIELDS, PLACE_XS_ROW_AROUND_LONGEST_SEQUENCES,
                PLACE_XS_ROW_AT_TOO_SHORT_EMPTY_SEQUENCES, PLACE_XS_ROW_IF_O_WILL_CREATE_TOO_LONG_COLOURED_SEQUENCE,
                MARK_AVAILABLE_FIELDS_IN_ROW);
    }

    public static List<NonogramSolveAction> getCorrectRowRangesSolveActions() {
        return List.of(CORRECT_ROW_SEQUENCES_RANGES, CORRECT_ROW_SEQUENCES_RANGES_WHEN_MET_COLOURED_FIELDS, CORRECT_ROW_SEQUENCES_RANGES_IF_X_ON_WAY);
    }

    public static boolean isMarkRowAction(NonogramSolveAction nonogramSolveAction) {
        return nonogramSolveAction.equals(NonogramSolveAction.MARK_AVAILABLE_FIELDS_IN_ROW);
    }

    public static List<NonogramSolveAction> getColourRowSolveActions() {
        return List.of(COLOUR_OVERLAPPING_FIELDS_IN_ROW, EXTEND_COLOURED_FIELDS_NEAR_X_IN_ROW);
    }

    public static List<NonogramSolveAction> getCorrectColumnRangesSolveActions() {
        return List.of(CORRECT_COLUMN_SEQUENCES_RANGES, CORRECT_COLUMN_SEQUENCES_RANGES_WHEN_MET_COLOURED_FIELDS, CORRECT_COLUMN_SEQUENCES_RANGES_IF_X_ON_WAY);
    }

    public static boolean isMarkColumnAction(NonogramSolveAction nonogramSolveAction) {
        return nonogramSolveAction.equals(NonogramSolveAction.MARK_AVAILABLE_FIELDS_IN_COLUMN);
    }

    public static List<NonogramSolveAction> getColourColumnSolveActions() {
        return List.of(COLOUR_OVERLAPPING_FIELDS_IN_COLUMN, EXTEND_COLOURED_FIELDS_NEAR_X_IN_COLUMN);
    }
}
